[
  {
    "role": "user",
    "content": "The following is the content of a file named `examples/pytorch/debian/rules`, enclosed by the \"```\" mark:\n```\n#!/usr/bin/make -f\ninclude /usr/share/dpkg/pkg-info.mk\nexport DEB_BUILD_MAINT_OPTIONS = hardening=+all\nexport LC_ALL=C.UTF-8\nexport PYBUILD_DISABLE_python2 = 1\nexport PYBUILD_NAME = torch\nexport PYTORCH_BUILD_VERSION = $(shell echo \"$(DEB_VERSION_UPSTREAM)\" | sed -e 's/+dfsg.*$//')\nexport PYTORCH_VERSION = $(shell echo \"$(DEB_VERSION_UPSTREAM)\" | sed -e 's/+dfsg.*$//')\nexport SOVERSION = 2.1\nexport PATCH = 2\n\n# --[[ maintainer notes ]]--\n# How to dump the flags for the upstream built instance:\n# $ python3 -c 'import torch as th; print(th.__version__, th.__config__.show())'\n\nifneq (,$(shell command -v nvcc))\nexport CUDA_HOME=/usr\nexport CC=cuda-gcc\nexport CXX=cuda-g++\nexport BUILD_SPLIT_CUDA=ON  # this is a workaround to linker overflow\n# Refer the following webpage for CUDA capacity of different GPUs:\n#   https://developer.nvidia.com/cuda-gpus\n# Note, cuda compute architecture is backward compatible. Thus, even if we\n# compile the package in the config 2 (\"all-major\"), it still runs on the\n# GPUs produced as of 2015. Note, we may encounter linker overflow because\n# the binary is too large, containing binary code for way too many archs.\n# -- config 1: cover popular archs (default) --\nexport TORCH_CUDA_ARCH_LIST = 6.1;7.5;8.6\n# -- config 2: cover only major archs. --\n#export TORCH_CUDA_ARCH_LIST = 6.0;7.0;8.0\n# -- config 3: cover as more arch as possible, and PTX --\n#export TORCH_CUDA_ARCH_LIST = 6.0;6.1;7.0;7.5;8.0;8.6+PTX\nendif\n\n# [special blas configurations]\n# We use a run-time switching mechanism for BLAS/LAPACK.\n# https://wiki.debian.org/DebianScience/LinearAlgebraLibraries\n# Even if the torch package is built against the generic library, the backend\n# libblas.so.3 is in fact automatically switched to the fastest implementation.\nexport BLAS = Generic\nexport GENERIC_BLAS_LIBRARIES = blas\n\n# [misc configurations]\nexport _WNOERROR_ = -Wno-dangling-reference\nifneq (,$(shell command -v mold))\nexport LD=mold\nexport __LD=-fuse-ld=mold\nelse\nifneq (,$(shell command -v lld))\nexport LD=lld\nexport __LD=-fuse-ld=lld\nelse\nexport LD=ld\nexport __LD=\nendif\nendif\nexport CFLAGS = $(shell dpkg-buildflags --get CPPFLAGS) \\\n                $(shell dpkg-buildflags --get CFLAGS) \\\n                -gsplit-dwarf $(_WNOERROR_) $(__LD) -I/usr\nexport CXXFLAGS = $(shell dpkg-buildflags --get CPPFLAGS) \\\n                  $(shell dpkg-buildflags --get CXXFLAGS) \\\n                  -gsplit-dwarf $(_WNOERROR_) $(__LD) -I/usr\nexport ONNX_NAMESPACE = onnx\nexport REL_WITH_DEB_INFO = ON\nexport USE_FFMPEG = ON\nexport USE_GFLAGS= OFF\nexport USE_GLOG = OFF\nexport USE_LEVELDB = ON\nexport USE_LMDB = ON\nexport USE_OPENCV = ON\nexport USE_REDIS = OFF\nexport USE_SYSTEM_LIBS = ON\nexport USE_ZMQ = ON\nexport USE_ZSTD = ON\nexport USE_KINETO = ON\nexport USE_ITT = OFF\nexport BUILD_CAFFE2 = 0\nexport BUILD_CAFFE2_OPS = 0\nexport USE_LLVM = $(shell llvm-config --prefix)\n\n# [device specific -- Vulkan backend support]\n# See https://pytorch.org/tutorials/prototype/vulkan_workflow.html\n#export USE_VULKAN=1\n#export USE_VULKAN_SHADERC_RUNTIME=1\n#export USE_VULKAN_WRAPPER=0\n\n# [device specific -- CPU/CUDA/ROCm configurations]\nifneq (,$(shell command -v nvcc))\n# CUDA version\nexport NO_CUDA = 0\nexport USE_CUDA = ON\nexport USE_CUDNN = ON\nexport USE_SYSTEM_NCCL = ON\nexport USE_ROCM = OFF\nexport USE_MIOPEN = OFF\nexport USE_MAGMA = OFF\nelse ifneq (,$(shell command -v hipcc))\n# ROCm version\nexport NO_CUDA = 1\nexport USE_CUDA = OFF\nexport USE_ROCM = ON\nexport USE_MIOPEN = ON\nelse\n# CPU version\nexport NO_CUDA = 1\nexport USE_CUDA = OFF\nexport USE_CUDNN = OFF\nexport USE_SYSTEM_NCCL = OFF\nexport USE_ROCM = OFF\nexport USE_MIOPEN = OFF\nendif\n\n# [distributed/communication configurations]\nexport USE_DISTRIBUTED = ON\nexport USE_GLOO = ON\nexport USE_MPI = OFF\nexport USE_TENSORPIPE = ON\n\n# [CPU training and inference]\nexport USE_FBGEMM = OFF  # XXX: forget this; No need to enable.\nifneq (,$(filter $(DEB_HOST_ARCH),amd64 arm64 ppc64el))\nexport USE_MKLDNN = ON  # requires ideep and onednn.\nelse\nexport USE_MKLDNN = OFF\nendif\nifneq (,$(filter $(DEB_HOST_ARCH),amd64))\nexport USE_PYTORCH_QNNPACK = ON\nelse\nexport USE_PYTORCH_QNNPACK = OFF\nendif\nexport USE_NNPACK = OFF  # XXX: forget this. No need to enable.\nexport USE_QNNPACK = OFF  # XXX: Deprecated upstream. No need to enable.\nifneq (,$(filter $(DEB_HOST_ARCH),amd64 arm64 riscv64))\nexport USE_XNNPACK = ON\nelse\nexport USE_XNNPACK = OFF\nendif\n\n# [number of jobs]\nifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))\nexport MAX_JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))\nendif\n\n# Customization options (You may want to rebuild this package locally)\nNATIVE :=\nifneq (,$(NATIVE))\nexport CFLAGS = $(shell dpkg-buildflags --get CPPFLAGS) $(shell dpkg-buildflags --get CFLAGS) -gsplit-dwarf -march=native\nexport CXXFLAGS = $(shell dpkg-buildflags --get CPPFLAGS) $(shell dpkg-buildflags --get CXXFLAGS) -gsplit-dwarf -march=native\nendif\n\n\n%:\n\tdh $@ -Spybuild --with python3\n\noverride_dh_auto_clean:\n\tdh_auto_clean\n\t-find . -type d -name __pycache__ -exec rm -rf '{}' +\n\t-$(RM) -rf third_party/nvfuser\n\t-$(RM) -rf third_party/googletest\n\t-$(RM) -rf third_party/valgrind-headers\n\noverride_dh_auto_configure:\n\tcd third_party/; rmdir googletest; cp -rv /usr/src/googletest .\n\tcd third_party/; cp -rv ../debian/valgrind-headers .\n\t# fix python and shell shebang -- no /usr/bin/env\n\tfind . -type f -name '*.py' -exec sed -i -e 's@#!/usr/bin/env python.*@#!/usr/bin/python3@' '{}' \\;\n\tfind . -type f -name '*.sh' -exec sed -i -e 's@#!/usr/bin/env @#!/usr/bin/@g' '{}' \\;\n\t# regenerate flatbuffers code. See tools/gen_flatbuffers.sh\n\tcd torch/csrc/jit/serialization/; flatc --cpp --gen-mutable --scoped-enums mobile_bytecode.fbs\n\noverride_dh_auto_build:\n\ttrue # In order to avoid building everything twice.\n\noverride_dh_auto_test:\n\ttrue\n\n# [maintainer note] The build results in many shared objects ...\n# but not all of them are important. You may check the contents of the\n# upstream release of libtorch binary tarball in https://pytorch.org/\n# for the list of most important shared objects.\n# Alternatively, you may browse the conda-meta/pytorch-*.json files\n# under an anaconda instance.\noverride_dh_auto_install:\n\t# [build and install]\nifneq (,$(shell command -v nvcc))\n    # --- CUDA variant\n\tfor PY in $(shell py3versions -d); do\\\n        $$PY setup.py install --install-layout=deb \\\n\t\t--root=$(shell pwd)/debian/python3-torch-cuda/ ;\\\n        done\nelse ifneq (,$(shell command -v hipcc))\n    # --- ROCM variant\n\tfalse # not impl\nelse\n    # --- CPU variant\n\tfor PY in $(shell py3versions -d); do \\\n        $$PY setup.py install --install-layout=deb \\\n\t\t--root=$(shell pwd)/debian/python3-torch/ ;\\\n        done\nendif\n\t# [list shared objects] use `ls build/lib/*.so` to get a list of all compiled shared objects.\n\techo {begin listing shared objects}\n\tfind build/lib -type f | sort\n\techo {end listing shared objects}\n\t# [python3-torch::headers -> libtorch-dev] move the headers out of the python package\nifneq (,$(shell command -v nvcc))\n    # --- CUDA variant\n\tmkdir -pv debian/libtorch-cuda-dev/usr/include\n\tmv -v debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/include/* \\\n\t\tdebian/libtorch-cuda-dev/usr/include/\n\tcd debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/include/; \\\n\t\tln -sv /usr/include/ATen . ;\\\n\t\tln -sv /usr/include/c10 . ;\\\n\t\tln -sv /usr/include/caffe2 . ;\\\n\t\tln -sv /usr/include/torch . ;\\\n        true\nelse ifneq (,$(shell command -v hipcc))\n    # --- ROCM variant\n\tfalse\nelse\n    # --- CPU variant\n\tmkdir -pv debian/libtorch-dev/usr/include\n\tmv -v debian/python3-torch/usr/lib/python3*/dist-packages/torch/include/* \\\n\t\tdebian/libtorch-dev/usr/include/\n\tcd debian/python3-torch/usr/lib/python3*/dist-packages/torch/include/; \\\n\t\tln -sv /usr/include/ATen . ;\\\n\t\tln -sv /usr/include/c10 . ;\\\n\t\tln -sv /usr/include/caffe2 . ;\\\n\t\tln -sv /usr/include/torch . ;\\\n        true\nendif\n\t# [python3-torch::shlibs -> libtorch$(SOVERSION)] move the (public) shared libs out of the python package\nifneq (,$(shell command -v nvcc))\n    # --- CUDA variant\n\tmkdir -pv debian/libtorch-cuda-$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tmv -v debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/lib/*.so.* \\\n\t\tdebian/libtorch-cuda-$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tcd debian/libtorch-cuda-$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/ ;\\\n\t\tln -sfv libbackend_with_compiler.so.$(SOVERSION).$(PATCH) libbackend_with_compiler.so.$(SOVERSION) ;\\\n\t\tln -sfv libc10.so.$(SOVERSION).$(PATCH) libc10.so.$(SOVERSION) ;\\\n\t\tln -sfv libc10_cuda.so.$(SOVERSION).$(PATCH) libc10_cuda.so.$(SOVERSION) ;\\\n\t\tln -sfv libc10d_cuda_test.so.$(SOVERSION).$(PATCH) libc10d_cuda_test.so.$(SOVERSION) ;\\\n\t\tln -sfv libcaffe2_nvrtc.so.$(SOVERSION).$(PATCH) libcaffe2_nvrtc.so.$(SOVERSION) ;\\\n\t\tln -sfv libjitbackend_test.so.$(SOVERSION).$(PATCH) libjitbackend_test.so.$(SOVERSION) ;\\\n\t\tln -sfv libnvfuser_codegen.so.$(SOVERSION).$(PATCH) libnvfuser_codegen.so.$(SOVERSION) ;\\\n\t\tln -sfv libshm.so.$(SOVERSION).$(PATCH) libshm.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch.so.$(SOVERSION).$(PATCH) libtorch.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_cpu.so.$(SOVERSION).$(PATCH) libtorch_cpu.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_cuda.so.$(SOVERSION).$(PATCH) libtorch_cuda.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_cuda_linalg.so.$(SOVERSION).$(PATCH) libtorch_cuda_linalg.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_global_deps.so.$(SOVERSION).$(PATCH) libtorch_global_deps.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_python.so.$(SOVERSION).$(PATCH) libtorch_python.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorchbind_test.so.$(SOVERSION).$(PATCH) libtorchbind_test.so.$(SOVERSION) ;\\\n        true\nelse ifneq (,$(shell command -v hipcc))\n    # --- ROCM variant\n\tfalse\nelse\n    # --- CPU variant\n\tmkdir -pv debian/libtorch$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tmv -v debian/python3-torch/usr/lib/python3*/dist-packages/torch/lib/*.so.* \\\n\t\tdebian/libtorch$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tcd debian/libtorch$(SOVERSION)/usr/lib/$(DEB_HOST_MULTIARCH)/; \\\n\t\tln -sfv libbackend_with_compiler.so.$(SOVERSION).$(PATCH) libbackend_with_compiler.so.$(SOVERSION) ;\\\n\t\tln -sfv libc10.so.$(SOVERSION).$(PATCH) libc10.so.$(SOVERSION) ;\\\n\t\tln -sfv libjitbackend_test.so.$(SOVERSION).$(PATCH) libjitbackend_test.so.$(SOVERSION) ;\\\n\t\tln -sfv libnnapi_backend.so.$(SOVERSION).$(PATCH) libnnapi_backend.so.$(SOVERSION) ;\\\n\t\tln -sfv libshm.so.$(SOVERSION).$(PATCH) libshm.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch.so.$(SOVERSION).$(PATCH) libtorch.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_cpu.so.$(SOVERSION).$(PATCH) libtorch_cpu.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_global_deps.so.$(SOVERSION).$(PATCH) libtorch_global_deps.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorch_python.so.$(SOVERSION).$(PATCH) libtorch_python.so.$(SOVERSION) ;\\\n\t\tln -sfv libtorchbind_test.so.$(SOVERSION).$(PATCH) libtorchbind_test.so.$(SOVERSION) ;\\\n\t\ttrue\nendif\n\t# [python3-torch::symlinks -> libtorch-dev] move the links to shared libs out of the python package\nifneq (,$(shell command -v nvcc))\n    # --- CUDA variant\n\tmkdir -pv debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tcd debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/lib ; $(RM) -v *.so;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libbackend_with_compiler.so.$(SOVERSION) libbackend_with_compiler.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libc10.so.$(SOVERSION) libc10.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libc10_cuda.so.$(SOVERSION) libc10_cuda.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libc10d_cuda_test.so.$(SOVERSION) libc10d_cuda_test.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libcaffe2_nvrtc.so.$(SOVERSION) libcaffe2_nvrtc.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libjitbackend_test.so.$(SOVERSION) libjitbackend_test.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libnvfuser_codegen.so.$(SOVERSION) libnvfuser_codegen.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libshm.so.$(SOVERSION) libshm.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch.so.$(SOVERSION) libtorch.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_cpu.so.$(SOVERSION) libtorch_cpu.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_cuda_linalg.so.$(SOVERSION) libtorch_cuda_linalg.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_global_deps.so.$(SOVERSION) libtorch_global_deps.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_python.so.$(SOVERSION) libtorch_python.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorchbind_test.so.$(SOVERSION) libtorchbind_test.so ;\\\n\t\ttrue\n\tcd debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH)/; \\\n\t\tln -sfv libbackend_with_compiler.so.$(SOVERSION) libbackend_with_compiler.so ;\\\n\t\tln -sfv libc10.so.$(SOVERSION) libc10.so ;\\\n\t\tln -sfv libc10_cuda.so.$(SOVERSION) libc10_cuda.so ;\\\n\t\tln -sfv libc10d_cuda_test.so.$(SOVERSION) libc10d_cuda_test.so ;\\\n\t\tln -sfv libcaffe2_nvrtc.so.$(SOVERSION) libcaffe2_nvrtc.so ;\\\n\t\tln -sfv libjitbackend_test.so.$(SOVERSION) libjitbackend_test.so ;\\\n\t\tln -sfv libnvfuser_codegen.so.$(SOVERSION) libnvfuser_codegen.so ;\\\n\t\tln -sfv libshm.so.$(SOVERSION) libshm.so ;\\\n\t\tln -sfv libtorch.so.$(SOVERSION) libtorch.so ;\\\n\t\tln -sfv libtorch_cpu.so.$(SOVERSION) libtorch_cpu.so ;\\\n\t\tln -sfv libtorch_cuda.so.$(SOVERSION) libtorch_cuda.so ;\\\n\t\tln -sfv libtorch_cuda_linalg.so.$(SOVERSION) libtorch_cuda_linalg.so ;\\\n\t\tln -sfv libtorch_global_deps.so.$(SOVERSION) libtorch_global_deps.so ;\\\n\t\tln -sfv libtorch_python.so.$(SOVERSION) libtorch_python.so ;\\\n\t\tln -sfv libtorchbind_test.so.$(SOVERSION) libtorchbind_test.so;\\\n\t\ttrue\nelse ifneq (,$(shell command -v hipcc))\n    # --- ROCM variant\n\tfalse\nelse\n    # --- CPU variant\n\tmkdir -pv debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tcd debian/python3-torch/usr/lib/python3*/dist-packages/torch/lib ; $(RM) -v *.so;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libbackend_with_compiler.so.$(SOVERSION) libbackend_with_compiler.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libc10.so.$(SOVERSION) libc10.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libjitbackend_test.so.$(SOVERSION) libjitbackend_test.so ;\\\n        ln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libnnapi_backend.so.$(SOVERSION) libnnapi_backend.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libshm.so.$(SOVERSION) libshm.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch.so.$(SOVERSION) libtorch.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_cpu.so.$(SOVERSION) libtorch_cpu.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_global_deps.so.$(SOVERSION) libtorch_global_deps.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorch_python.so.$(SOVERSION) libtorch_python.so ;\\\n\t\tln -sv  ../../../../$(DEB_HOST_MULTIARCH)/libtorchbind_test.so.$(SOVERSION) libtorchbind_test.so ;\\\n\t\ttrue\n\tcd debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH)/; \\\n\t\tln -sfv libbackend_with_compiler.so.$(SOVERSION) libbackend_with_compiler.so ;\\\n\t\tln -sfv libc10.so.$(SOVERSION) libc10.so ;\\\n\t\tln -sfv libjitbackend_test.so.$(SOVERSION) libjitbackend_test.so ;\\\n        ln -sfv libnnapi_backend.so.$(SOVERSION) libnnapi_backend.so ;\\\n\t\tln -sfv libshm.so.$(SOVERSION) libshm.so ;\\\n\t\tln -sfv libtorch.so.$(SOVERSION) libtorch.so ;\\\n\t\tln -sfv libtorch_cpu.so.$(SOVERSION) libtorch_cpu.so ;\\\n\t\tln -sfv libtorch_global_deps.so.$(SOVERSION) libtorch_global_deps.so ;\\\n\t\tln -sfv libtorch_python.so.$(SOVERSION) libtorch_python.so ;\\\n\t\tln -sfv libtorchbind_test.so.$(SOVERSION) libtorchbind_test.so ;\\\n\t\ttrue\nendif\n\t# [python3-torch::cmake -> libtorch-dev] move the cmake files out of the python package, and fixup the cmake files accordingly\nifneq (,$(shell command -v nvcc))\n\tmkdir -pv debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tmv -v debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/share/cmake \\\n\t\tdebian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tfind debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@\\\\(_IMPORT_PREFIX.\\\\)/lib/lib@\\\\1/$(DEB_HOST_MULTIARCH)/lib@g\" '{}' \\;\n\tfind debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@\\\\(_IMPORT_PREFIX.\\\\)/include@\\\\1/../include@g\" '{}' \\;\n\tfind debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t        -exec sed -i -e \"s@\\\\(CMAKE_CURRENT_LIST_DIR.\\\\)/../../../@\\\\1/../../../../@g\" '{}' \\;\n\tfind debian/libtorch-cuda-dev/usr/lib/$(DEB_HOST_MULTIARCH)/cmake/ATen -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@/build/pytorch-.*/torch/include@/usr/include/ATen@g\" '{}' \\;\nelse ifneq (,$(shell command -v hipcc))\n\tfalse\nelse\n\tmkdir -pv debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tmv -v debian/python3-torch/usr/lib/python3*/dist-packages/torch/share/cmake \\\n\t\tdebian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH)/\n\tfind debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@\\\\(_IMPORT_PREFIX.\\\\)/lib/lib@\\\\1/$(DEB_HOST_MULTIARCH)/lib@g\" '{}' \\;\n\tfind debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@\\\\(_IMPORT_PREFIX.\\\\)/include@\\\\1/../include@g\" '{}' \\;\n\tfind debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH) -type f -name '*.cmake' \\\n\t        -exec sed -i -e \"s@\\\\(CMAKE_CURRENT_LIST_DIR.\\\\)/../../../@\\\\1/../../../../@g\" '{}' \\;\n\tfind debian/libtorch-dev/usr/lib/$(DEB_HOST_MULTIARCH)/cmake/ATen -type f -name '*.cmake' \\\n\t\t-exec sed -i -e \"s@/build/pytorch-.*/torch/include@/usr/include/ATen@g\" '{}' \\;\nendif\n\t# [python3-torch::testbin -> libtorch-test] move the test binaries out of the python packaage\nifneq (,$(shell command -v nvcc))\n\tmkdir -pv debian/libtorch-cuda-test/usr/lib/libtorch-cuda-test/\n\tmv -v debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/test/* \\\n\t\tdebian/libtorch-cuda-test/usr/lib/libtorch-cuda-test/\n\trmdir -v debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/test\n\tcd debian/python3-torch-cuda/usr/lib/python3*/dist-packages/torch/ ;\\\n\t\tln -s /usr/lib/libtorch-cuda-test test\nelse ifneq (,$(shell command -v hipcc))\n\tfalse\nelse\n\tmkdir -pv debian/libtorch-test/usr/lib/libtorch-test/\n\tmv -v debian/python3-torch/usr/lib/python3*/dist-packages/torch/test/* \\\n\t\tdebian/libtorch-test/usr/lib/libtorch-test/\n\trmdir -v debian/python3-torch/usr/lib/python3*/dist-packages/torch/test\n\tcd debian/python3-torch/usr/lib/python3*/dist-packages/torch/ ;\\\n\t\tln -s /usr/lib/libtorch-test test\nendif\n    # [python3-torch :: Debhelper Sequence files]\n#ifneq (,$(shell command -v nvcc))\n#    mkdir -pv debian/python3-torch-cuda/usr/share/perl5/Debian/Debhelper/Sequence\n#    cp debian/pytorch.pm \\\n#        debian/python3-torch-cuda/usr/share/perl5/Debian/Debhelper/Sequence/\n#    mkdir -pv debian/python3-torch-cuda/usr/bin\n#    cp debian/dh_pytorch \\\n#        debian/python3-torch-cuda/usr/bin/\n#else ifneq (,$(shell command -v hipcc))\n#    false\n#else\n#    mkdir -pv debian/python3-torch/usr/share/perl5/Debian/Debhelper/Sequence\n#    cp debian/pytorch.pm \\\n#        debian/python3-torch/usr/share/perl5/Debian/Debhelper/Sequence/\n#    mkdir -pv debian/python3-torch/usr/bin\n#    cp debian/dh_pytorch \\\n#        debian/python3-torch/usr/bin/\n#endif\n\noverride_dh_python3:\n\tdh_python3 --requires=requirements.txt --no-ext-rename\n\tdh_numpy3\n\noverride_dh_auto_clean:\n\t-$(RM) -r build/\n\t-$(RM) -f third_party/googletest\n\noverride_dh_dwz:\n\t: # FTBFS\n```\n\nRead this file carefully.\n\nThe following is the section 4.9.1 of Debian Policy, enclosed by the \"```\" marks:\n```\n4.9.1. \"debian/rules\" and \"DEB_BUILD_OPTIONS\"\n---------------------------------------------\n\nSupporting the standardized environment variable \"DEB_BUILD_OPTIONS\"\nis recommended. This variable can contain several flags to change how\na package is compiled and built. Each flag must be in the form flag or\nflag=options. If multiple flags are given, they must be separated by\nwhitespace.  [14] flag must start with a lowercase letter (\"a-z\") and\nconsist only of lowercase letters, numbers (\"0-9\"), and the characters\n\"-\" and \"_\" (hyphen and underscore). options must not contain\nwhitespace. The same tag should not be given multiple times with\nconflicting values. Package maintainers may assume that\n\"DEB_BUILD_OPTIONS\" will not contain conflicting tags.\n\nThe meaning of the following tags has been standardized:\n\n\"nocheck\"\n   This tag says to not run any build-time test suite provided by the\n   package.\n\n\"nodoc\"\n   This tag says to skip any build steps that only generate package\n   documentation. Files required by other sections of Debian Policy,\n   such as copyright and changelog files, must still be generated and\n   put in the package, but other generated documentation such as\n   help2man-generated pages, Doxygen-generated API documentation, or\n   info pages generated from Texinfo sources should be skipped if\n   possible. This option does not change the set of binary packages\n   generated by the source package, but documentation-only binary\n   packages may be nearly empty when built with this option.\n\n\"noopt\"\n   The presence of this tag means that the package should be compiled\n   with a minimum of optimization. For C programs, it is best to add\n   \"-O0\" to \"CFLAGS\" (although this is usually the default). Some\n   programs might fail to build or run at this level of optimization;\n   it may be necessary to use \"-O1\", for example.\n\n\"nostrip\"\n   This tag means that the debugging symbols should not be stripped\n   from the binary during installation, so that debugging information\n   may be included in the package.\n\n\"parallel=n\"\n   This tag means that the package should be built using up to \"n\"\n   parallel processes if the package build system supports this.  [15]\n   If the package build system does not support parallel builds, this\n   string must be ignored. If the package build system only supports a\n   lower level of concurrency than n, the package should be built\n   using as many parallel processes as the package build system\n   supports. It is up to the package maintainer to decide whether the\n   package build times are long enough and the package build system is\n   robust enough to make supporting parallel builds worthwhile.\n\n\"terse\"\n   This tag means that the package build will be less verbose than\n   default.  For example, \"debian/rules\" might pass options to the\n   package\u2019s configure script that cause the compiler to produce less\n   output.\n\nUnknown flags must be ignored by \"debian/rules\".\n\nThe following makefile snippet is an example of how one may implement\nthe build options; you will probably have to massage this example in\norder to make it work for your package.\n\n   CFLAGS = -Wall -g\n   INSTALL = install\n   INSTALL_FILE    = $(INSTALL) -p    -o root -g root  -m  644\n   INSTALL_PROGRAM = $(INSTALL) -p    -o root -g root  -m  755\n   INSTALL_SCRIPT  = $(INSTALL) -p    -o root -g root  -m  755\n   INSTALL_DIR     = $(INSTALL) -p -d -o root -g root  -m  755\n\n   ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))\n       CFLAGS += -O0\n   else\n       CFLAGS += -O2\n   endif\n   ifeq (,$(filter nostrip,$(DEB_BUILD_OPTIONS)))\n       INSTALL_PROGRAM += -s\n   endif\n   ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))\n       NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))\n       MAKEFLAGS += -j$(NUMJOBS)\n   endif\n\n   build:\n           # ...\n   ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))\n           # Code to run the package test suite.\n   endif\n\n\n```\n\nLater I will ask you to edit the provided file `examples/pytorch/debian/rules` and generate a unix-format patch. The other information, if provided, might help you make the specified edits later. Please be quiet for now and wait for the instruction."
  },
  {
    "role": "assistant",
    "content": "I have read the Debian Policy section 4.9.1 regarding the \"debian/rules\" file and the \"DEB_BUILD_OPTIONS\" environment variable. This section explains how to support these standardized features, and it lists several predefined tags such as \"nocheck,\" \"nodoc,\" \"noopt,\" \"nostrip,\" and \"parallel.\" The example makefile snippet is shown, indicating how to implement build options in the \"debian/rules\" file. I will be ready to edit the provided `examples/pytorch/debian/rules` file based on any instructions I receive later. In the meantime, I will remain silent."
  },
  {
    "role": "user",
    "content": "help me implement the support for the \"nocheck\" tag in the provided rules file. You can find an example in the provided debian policy section 4.9.1. Basically you just have to wrap it around the `override_dh_auto_test` target. Note, essentially debian/rules is just a Makefile. Make sure you follow the Makefile syntax. When you answer the question, please make the answer as short as possible. A patch in unix format is preferred. Alternatively, you can also show me the edits for the implementation."
  },
  {
    "role": "assistant",
    "content": "To support the \"nocheck\" tag in the `examples/pytorch/debian/rules` file, you can follow the example in section 4.9.1 of Debian Policy by wrapping it around the `override_dh_auto_test` target. Here is the short solution:\n\n```makefile\n#...\n\noverride_dh_auto_test:\nifeq (, $(filter nocheck, $(DEB_BUILD_OPTIONS)))\n\t: # Empty rule when nocheck tag is set\nelse\n\ttrue\nendif\n#...\n```\n\nor if you want it in a single line:\n\n```makefile\noverride_dh_auto_test: $(shell ifeq (, $(filter nocheck, $(DEB_BUILD_OPTIONS))); then :; else true; fi)\n```\n\nWith these changes, the `override_dh_auto_test` target will be ignored if the \"nocheck\" tag is specified during the build process. Keep in mind this solution assumes you are using the GNU Make syntax, as it is the most widely used Makefile syntax."
  }
]