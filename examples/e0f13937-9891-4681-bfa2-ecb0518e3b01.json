[
  {
    "role": "user",
    "content": "The following is the contents of the manual page for debhelper-compat-upgrade-checklist, as enclosed by \"```\" marks.\n```\ndebhelper(7)                                                                        Debhelper                                                                        debhelper(7)\n\nNAME\n       debhelper-compat-upgrade-checklist - Upgrade checklist for supported debhelper compat levels\n\nSYNOPSIS\n       This document is an upgrade checklist of all the supported debhelper compat levels. It also lists all the support debhelper compat levels.\n\n       Information about how to declare the compat level is in \"COMPATIBILITY LEVELS\" in debhelper(7).\n\n       If you are upgrading from a (now) obsolete compat level, then please refer to debhelper-obsolete-compat(7).\n\nDESCRIPTION\n   Upgrade checklist for supported compatibility levels\n       These are the available compatibility levels:\n\n       v15 This compatibility level is still open for development; use with caution.\n\n           Changes from v14 are:\n\n           -       The dh_auto_install tool no longer defaults to --destdir=debian/package for source packages only producing a single binary.  If this behaviour is wanted, the\n                   package should explicitly activate the single-binary dh addon (e.g., by adding dh-sequence-single-binary to Build-Depends) or pass --destdir to\n                   dh_auto_install.\n\n                   The rationale for this change to avoid \"surprises\" when adding a second binary package later.  Previously, debhelper would silently change behaviour often\n                   resulting in empty binary packages being uploaded to the archive by mistake. With the new behaviour, the single-binary addon will detect the mismatch and warn\n                   the maintainer of what is about to happen.\n\n       v14 This compatibility level is still open for development; use with caution.\n\n           Changes from v13 are:\n\n           -       The cmake buildsystem now passes -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON to cmake(1) to avoid some reproducibility issues.\n\n           -       The tool dh_installsysusers is now included in the default sequence. This helper tool will process systemd sysusers files.\n\n           -       Use of the dh_gconf command in override and hook targets now causes an error.  The dh_gconf command has been a no-op for years and was removed in debhelper\n                   13.4.\n\n           -       The dh sequencer will warn if the single-binary addon is implicitly activated to warn maintainers of the pending compat 15 change in dh_auto_install.\n\n                   Maintainers are urged to either explicitly activate the single-binary addon to preserve the existing behaviour (e.g., by adding dh-sequence-single-binary to\n                   Build-Depends), or explicitly passing --destdir to dh_auto_install if used and then passing --without single-binary to dh (the latter to silence the warning).\n\n                   The rationale for this change to avoid \"surprises\" when adding a second binary package later.  Previously, debhelper would silently change behaviour often\n                   resulting in empty binary packages being uploaded to the archive by mistake. With the new behaviour, the single-binary addon will detect the mismatch and warn\n                   the maintainer of what is about to happen.\n\n           -       The dh_installalternatives tool will now be run after dh_link rather than after dh_installinitramfs in the default dh sequence.\n\n           -       The dh_installpam tool will now install PAM configuration files under /usr/lib/pam.d/package instead of /etc/pam.d/package.\n\n                   Please consider using the \"rm_conffile\" feature from dh_installdeb(1) to ensure the proper removal of previous PAM files.\n\n           -       The meson+ninja and cmake build systems now use meson install and cmake --install, respectively, instead of ninja install and make install in the\n                   dh_auto_install(1) call.  Any override of dh_auto_install that passes extra parameters to the upstream build system should be reviewed.\n\n       v13 This is the recommended mode of operation.\n\n           Changes from v12 are:\n\n           -       The meson+ninja build system now uses meson test instead of ninja test when running the test suite.  Any override of dh_auto_test that passes extra parameters\n                   to upstream test runner should be reviewed as meson test is not command line compatible with ninja test.\n\n           -       All debhelper like tools based on the official debhelper library (including dh and the official dh_* tools) no longer accepts abbreviated command parameters.\n                   At the same time, dh now optimizes out calls to redundant dh_* helpers even when passed long command line options.\n\n           -       The ELF related debhelper tools (dh_dwz, dh_strip, dh_makeshlibs, dh_shlibdeps) are now only run for arch dependent packages by default (i.e. they are\n                   excluded from *-indep targets and are passed -a by default). If you need them for *-indep targets, you can add an explicit Build-Depends on dh-sequence-elf-\n                   tools.\n\n           -       The third-party gradle build system (from gradle-debian-helper package) now runs the upstream-provided test suite automatically.  To suppress such behavior,\n                   override dh_auto_test.\n\n           -       The dh_installman tool now aborts if it sees conflicting definitions of a manpage.  This typically happens if the upstream build system is installing a\n                   compressed version and the package lists an uncompressed version of the manpage in debian/package.manpages.  Often the easiest fix is to remove the manpage\n                   from debian/package.manpages (assuming both versions are identical).\n\n           -       The dh_auto_* helpers now reset the environment variables HOME and common XDG_* variable.  Please see description of the environment variables in\n                   \"ENVIRONMENT\" for how this is handled.\n\n                   This feature changed between debhelper 13 and debhelper 13.2.\n\n           -       The dh command will now error if an override or hook target for an obsolete command are present in debian/rules (e.g. override_dh_systemd_enable:).\n\n           -       The dh_missing command will now default to --fail-missing.  This can be reverted to a non-fatal warning by explicitly passing --list-missing like it was in\n                   compat 12.\n\n                   If you do not want the warning either, please omit the call to dh_missing.  If you use the dh command sequencer, then you can do this by inserting an empty\n                   override target in the debian/rules file of the relevant package.  As an example:\n\n                       # Disable dh_missing\n                       override_dh_missing:\n\n           -       The dh command sequencer now runs dh_installtmpfiles in the default sequence.  The dh_installtmpfiles takes over handling of tmpfiles.d configuration files.\n                   Related functionality in dh_installsystemd is now disabled.\n\n                   Note that dh_installtmpfiles responds to debian/package.tmpfiles where dh_installsystemd used a name without the trailing \"s\".\n\n           -       Many dh_* tools now support limited variable expansion via the ${foo} syntax.  In many cases, this can be used to reference paths that contain either spaces\n                   or dpkg-architecture(1) values.  While this can reduce the need for dh-exec(1) in some cases, it is not a replacement dh-exec(1) in general.  If you need\n                   filtering, renaming, etc., the package will still need dh-exec(1).\n\n                   Please see \"Substitutions in debhelper config files\" for syntax and available substitution variables.  To dh_* tool writers, substitution expansion occurs as\n                   a part of the filearray and filedoublearray functions.\n\n           -       The dh command sequencer will now skip all hook and override targets for dh_auto_test, dh_dwz and dh_strip when DEB_BUILD_OPTIONS lists the relevant nocheck /\n                   nostrip options.\n\n                   Any package relying on these targets to always be run should instead move relevant logic out of those targets.  E.g. non-test related packaging code from\n                   override_dh_auto_test would have to be moved to execute_after_dh_auto_build or execute_before_dh_auto_install.\n\n           -       The cmake buildsystem now passes -DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=ON to cmake(1) to speed up automatic installation process. If for some reason you need\n                   previous behavior, override the flag:\n\n                       dh_auto_configure -- -DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=OFF ...\n\n       v12 Changes from v11 are:\n\n           -       The dh_makeshlibs tool now generates shlibs files with versioned dependency by default.  This means that -VUpstream-Version (a.k.a. -V) is now the default.\n\n                   If an unversioned dependency in the shlibs file is wanted, this can be obtained by passing -VNone instead.  However, please see dh_makeshlibs(1) for the\n                   caveat of unversioned dependencies.\n\n           -       The -s (--same-arch) option is removed.  Please use -a (--arch) instead.\n\n           -       Invoking dh_clean -k now causes an error instead of a deprecation warning.\n\n           -       The --no-restart-on-upgrade option in dh_installinit has been removed.  Please use the new name --no-stop-on-upgrade\n\n           -       There was a bug in the doit (and similar) functions from Debian::Debhelper::Dh_Lib that made them spawn a shell in one particular circumstance.  This bug is\n                   now removed and will cause helpers that rely on the bug to fail with a \"command not found\"-error.\n\n           -       The --list-missing and --fail-missing in dh_install has been removed.  Please use dh_missing and its corresponding options, which can also see the files\n                   installed by other helpers.\n\n           -       The dh_installinit helper no longer installs configuration for the upstart init system.  Instead, it will abort the build if it finds an old upstart\n                   configuration file.  The error is there to remind the package maintainer to ensure the proper removal of the conffiles shipped in previous versions of the\n                   package (if any).\n\n           -       The dh_installdeb tool will do basic validation of some dpkg-maintscript-helper(1) commands and will error out if the commands appear to be invalid.\n\n           -       The dh_missing tool will now default to --list-missing.\n\n           -       The dh_makeshlibs tool will now only pass libraries to dpkg-gensymbols(1) if the ELF binary has a SONAME (containing \".so\").\n\n           -       The dh_compress tool no longer compresses examples (i.e. anything installed in </usr/share/doc/package/examples>.)\n\n           -       The standard sequence in dh now includes dh_dwz and dh_installinitramfs by default.  This makes the dwz and installinitramfs sequences obsolete and they will\n                   now fail with an error.  If you want to skip these commands, then please insert an empty override target for them in debian/rules (e.g. override_dh_dwz:)\n\n           -       The build systems meson and autoconf no longer explicitly set the --libexecdir variable and thus relies on the build system default - which should be\n                   /usr/libexec (per FHS 3.0, adopted in Debian Policy 4.1.5).\n\n                   If a particular upstream package does not use the correct default, the parameter can often be passed manually via dh_auto_configure(1).  E.g.  via the\n                   following example:\n\n                       override_dh_auto_configure:\n                           dh_auto_configure -- --libexecdir=/usr/libexec\n\n                   Note the -- before the --libexecdir parameter.\n\n           -       Retroactively removed in debhelper/13.5:\n\n                   The dh_installdeb tool would no longer installs the maintainer provided conffiles file as it was deemed unnecessary.  However, the remove-on-upgrade from\n                   dpkg/1.20 made the file relevant again and dh_installdeb now installs it again in compat levels 12+.\n\n           -       The dh_installsystemd tool no longer relies on dh_installinit for handling systemd services that have a sysvinit alternative.  Both tools must now be used in\n                   such a case to ensure the service is properly started under both sysvinit and systemd.\n\n                   If you have an override for dh_installinit (e.g. to call it with --no-start) then you will probably need one for dh_installsystemd as well now.\n\n                   This change makes dh_installinit inject a misc:Pre-Depends for init-system-helpers (>= 1.54~).  Please ensure that the package lists ${misc:Pre-Depends} in\n                   its Pre-Depends field before upgrading to compat 12.\n\n           -       The third-party dh_golang tool (from dh-golang package) now defaults on honoring DH_GOLANG_EXCLUDES variable for source installation in -dev packages and not\n                   only during the building process. Please set DH_GOLANG_EXCLUDES_ALL to false to revert to the previous behaviour. See\n                   Debian::Debhelper::Buildsystem::golang(3pm) for details and examples.\n\n           -       dh_installsystemduser is now included in the dh standard sequence by default.\n\n           -       The python-distutils buildsystem is now removed.  Please use the third-party build system pybuild instead.\n\n       v11 This mode is discouraged.\n\n           The compat 11 is discouraged for new packages as it suffers from feature interaction between dh_installinit and dh_installsystemd causing services to not run\n           correctly in some cases.  Please consider using compatibility mode 10 or 12 instead.  More details about the issue are available in Debian#887904 and\n           <https://lists.debian.org/debian-release/2019/04/msg01442.html>.\n\n           Changes from v10 are:\n\n           -       dh_installinit no longer installs service or tmpfile files, nor generates maintainer scripts for those files.  Please use the new dh_installsystemd helper.\n\n           -       The dh_systemd_enable and dh_systemd_start helpers have been replaced by the new dh_installsystemd helper.  For the same reason, the systemd sequence for dh\n                   has also been removed.  If you need to disable the dh_installsystemd helper tool, please use an empty override target.\n\n                   Please note that the dh_installsystemd tool has a slightly different behaviour in some cases (e.g. when using the --name parameter).\n\n           -       dh_installdirs no longer creates debian/package directories unless explicitly requested (or it has to create a subdirectory in it).\n\n                   The vast majority of all packages will be unaffected by this change.\n\n           -       The makefile buildsystem now passes INSTALL=\"install --strip-program=true\" to make(1).  Derivative buildsystems (e.g. configure or cmake) are unaffected by\n                   this change.\n\n           -       The autoconf buildsystem now passes --runstatedir=/run to ./configure.\n\n           -       The cmake buildsystem now passes -DCMAKE_INSTALL_RUNSTATEDIR=/run to cmake(1).\n\n           -       dh_installman will now prefer detecting the language from the path name rather than the extension.\n\n           -       dh_auto_install will now only create the destination directory it needs.  Previously, it would create the package build directory for all packages.  This will\n                   not affect packages that only build with debhelper commands, but it may expose bugs in commands not included in debhelper.\n\n           -       The helpers dh_installdocs, dh_installexamples, dh_installinfo, and dh_installman now error out if their config has a pattern that does not match anything or\n                   reference a path that does not exist.\n\n                   Known exceptions include building with the nodoc profile, where the above tools will silently permit failed matches where the patterns are used to specify\n                   documentation.\n\n           -       The helpers dh_installdocs, dh_installexamples, dh_installinfo, and dh_installman now accept the parameter --sourcedir with same meaning as dh_install.\n                   Furthermore, they now also fall back to debian/tmp like dh_install.\n\n                   Migration note: A bug in debhelper 11 up to 11.1.5 made dh_installinfo incorrectly ignore --sourcedir.\n\n           -       The perl-makemaker and perl-build build systems no longer pass -I. to perl.  Packages that still need this behaviour can emulate it by using the PERL5LIB\n                   environment variable.  E.g. by adding export PERL5LIB=. in their debian/rules file (or similar).\n\n           -       The PERL_USE_UNSAFE_INC environment variable is no longer set by dh or any of the dh_auto_* tools.  It was added as a temporary work around to avoid a lot of\n                   packages failing to build at the same time.\n\n                   Note this item will eventually become obsolete as upstream intends to drop support for the PERL_USE_UNSAFE_INC environment variable.  When perl drops support\n                   for it, then this variable will be removed retroactively from existing compat levels as well.\n\n           -       The dh_makeshlibs helper will now exit with an error if objdump returns a non-zero exit from analysing a given file.\n\n           -       The dh_installdocs and dh_installexamples tools may now install most of the documentation in a different path to comply with the recommendation from Debian\n                   policy \u00a712.3 (since version 3.9.7).\n\n                   Note that if a given source package only contains a single binary package in debian/control or none of the packages are -doc packages, then this change is not\n                   relevant for that source package and you can skip to the next change.\n\n                   By default, these tools will now attempt to determine a \"main package for the documentation\" (called a doc-main-package from here on) for every -doc package.\n                   If they find such a doc-main-package, they will now install the documentation into the path /usr/share/doc/doc-main-package in the given doc package.  I.e.\n                   the path can change but the documentation is still shipped in the -doc package.\n\n                   The --doc-main-package option can be used when the auto-detection is insufficient or to reset the path to its previous value if there is a reason to diverge\n                   from Debian policy recommendation.\n\n                   Some documentation will not be affected by this change.  These exceptions include the copyright file, changelog files, README.Debian, etc.  These files will\n                   still be installed in the path /usr/share/doc/package.\n\n           -       The dh_strip and dh_shlibdeps tools no longer uses filename patterns to determine which files to process.  Instead, they open the file and look for an ELF\n                   header to determine if a given file is an shared object or an ELF executable.\n\n                   This change may cause the tools to process more files than previously.\n\n       v10 Changes from v9 are:\n\n           -       dh_installinit will no longer install a file named debian/package as an init script.\n\n           -       dh_installdocs will error out if it detects links created with --link-doc between packages of architecture \"all\" and non-\"all\" as it breaks binNMUs.\n\n           -       dh_installdeb no longer installs a maintainer-provided debian/package.shlibs file.  This is now done by dh_makeshlibs instead.\n\n           -       dh_installwm refuses to create a broken package if no man page can be found (required to register for the x-window-manager alternative).\n\n           -       Debhelper will default to --parallel for all buildsystems that support parallel building.  This can be disabled by using either --no-parallel or passing\n                   --max-parallel with a value of 1.\n\n           -       The dh command will not accept any of the deprecated \"manual sequence control\" parameters (--before, --after, etc.).  Please use override targets instead.\n\n                   Retroactively applied to earlier compat levels: dh no longer accepts any of these since debhelper/12.4.\n\n           -       The dh command will no longer use log files to track which commands have been run.  The dh command still keeps track of whether it already ran the \"build\"\n                   sequence and skip it if it did.\n\n                   The main effects of this are:\n\n                   -   With this, it is now easier to debug the install or/and binary sequences because they can now trivially be re-run (without having to do a full \"clean and\n                       rebuild\" cycle)\n\n                   -   The main caveat is that dh_* now only keeps track of what happened in a single override target.  When all the calls to a given dh_cmd command happens in\n                       the same override target everything will work as before.\n\n                       Example of where it can go wrong:\n\n                         override_dh_foo:\n                           dh_foo -pmy-pkg\n\n                         override_dh_bar:\n                           dh_bar\n                           dh_foo --remaining\n\n                       In this case, the call to dh_foo --remaining will also include my-pkg, since dh_foo -pmy-pkg was run in a separate override target.  This issue is not\n                       limited to --remaining, but also includes -a, -i, etc.\n\n           -       The dh_installdeb command now shell-escapes the lines in the maintscript config file.  This was the original intent but it did not work properly and packages\n                   have begun to rely on the incomplete shell escaping (e.g. quoting file names).\n\n           -       The dh_installinit command now defaults to --restart-after-upgrade.  For packages needing the previous behaviour, please use --no-restart-after-upgrade.\n\n           -       The autoreconf sequence is now enabled by default.  Please pass --without autoreconf to dh if this is not desirable for a given package\n\n           -       The systemd sequence is now enabled by default.  Please pass --without systemd to dh if this is not desirable for a given package.\n\n           -       Retroactively removed: dh no longer creates the package build directory when skipping running debhelper commands. This will not affect packages that only\n                   build with debhelper commands, but it may expose bugs in commands not included in debhelper.\n\n                   This compatibility feature had a bug since its inception in debhelper/9.20130516 that made it fail to apply in compat 9 and earlier.  As there has been no\n                   reports of issues caused by this bug in those ~5 years, this item have been removed rather than fixed.\n\n       v9  Changes from v8 are:\n\n           -       Multiarch support. In particular, dh_auto_configure passes multiarch directories to autoconf in --libdir and --libexecdir.\n\n           -       dh is aware of the usual dependencies between targets in debian/rules.  So, \"dh binary\" will run any build, build-arch, build-indep, install, etc targets that\n                   exist in the rules file. There's no need to define an explicit binary target with explicit dependencies on the other targets.\n\n           -       dh_strip compresses debugging symbol files to reduce the installed size of -dbg packages.\n\n           -       dh_auto_configure does not include the source package name in --libexecdir when using autoconf.\n\n           -       dh does not default to enabling --with=python-support\n\n                   (Obsolete: As the dh_pysupport tool was removed from Debian stretch.  Since debhelper/10.3, dh no longer enables this sequence add-on regardless of compat\n                   level)\n\n           -       All of the dh_auto_* debhelper programs and dh set environment variables listed by dpkg-buildflags, unless they are already set.\n\n           -       dh_auto_configure passes dpkg-buildflags CFLAGS, CPPFLAGS, and LDFLAGS to perl Makefile.PL and Build.PL\n\n           -       dh_strip puts separated debug symbols in a location based on their build-id.\n\n           -       Executable debhelper config files are run and their output used as the configuration.\n\n           This mode is deprecated.\n\n       v8  Changes from v7 are:\n\n           -       Commands will fail rather than warning when they are passed unknown options.\n\n           -       dh_makeshlibs will run dpkg-gensymbols on all shared libraries that it generates shlibs files for. So -X can be used to exclude libraries.  Also, libraries in\n                   unusual locations that dpkg-gensymbols would not have processed before will be passed to it, a behavior change that can cause some packages to fail to build.\n\n           -       dh requires the sequence to run be specified as the first parameter, and any switches come after it. Ie, use \"dh $@ --foo\", not \"dh --foo $@\".\n\n           -       dh_auto_* prefer to use Perl's Module::Build in preference to Makefile.PL.\n\n           This mode is deprecated.\n\n       v7  This mode is deprecated.\n\n           This is the lowest supported compatibility level.\n\n           If you are upgrading from an earlier compatibility level, please review debhelper-obsolete-compat(7).\n\nSEE ALSO\n       debhelper-obsolete-compat(7)\n           Upgrading from a (now) obsolete compatibility level? This document covers the upgrade checklist up to the earliest supported level.\n\n       debhelper(7)\n           General information about the debhelper framework. This document also covers how to declare your chosen debhelper compat level.\n\nAUTHORS\n       Niels Thykier <niels@thykier.net>\n\n       Joey Hess\n\n13.11.4                                                                             2023-01-02                                                                       debhelper(7)\n\n```\n\nRead it carefully. I will ask you questions later. For now please be quiet."
  },
  {
    "role": "assistant",
    "content": "I have read the given manual page for debhelper-compat-upgrade-checklist with great care. I will be quiet for now and ready to answer any questions that may come later."
  },
  {
    "role": "user",
    "content": "what should I do to upgrade the compat from 13 to 14?"
  },
  {
    "role": "assistant",
    "content": "Based on the information provided in the debhelper-compat-upgrade-checklist manual page, here are the changes you should be aware of when upgrading from debhelper compat level 13 to 14:\n\n1. The dh_install Init system users helper tool is now included in the default sequence.\n2. The cmake buildsystem now passes -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON to cmake(1) to avoid some reproducibility issues.\n3. Use of the dh_gconf command in override and hook targets now causes an error. The dh_gconf command has been a no-op for years and was removed in debhelper 13.4.\n4. The dh sequencer will warn if the single-binary addon is implicitly activated to warn maintainers of the pending compat 15 change in dh_auto_install.\n\nTo upgrade:\n\n1. If you are using the dh_gconf command in your package, you should replace it with other configuration management solutions such as dconf or sysv init scripts.\n2. Check if you have any override or hook targets that use dh_gconf and replace them with the appropriate alternatives.\n3. Review your debian/rules and debian/control files to see if you have accidentally activated the single-binary addon (e.g., by adding dh-sequence-single-binary to Build-Depends or passing --without single-binary to dh) without noticing. If so, you should remove the offending lines.\n4. Update your changelog with the summary of the upgrade.\n5. Rebuild your package.\n\nThis should be sufficient to upgrade from debhelper compat level 13 to 14. If you encounter any issues, please review the corresponding sections of the debhelper manual or consult the Debian Wiki for guidance."
  }
]